/* Generated by Together */
#include "CbmDetector.h"

#include "CbmModule.h"
#include "CbmVolume.h"

#include "CbmGeoNode.h"

#include "TVirtualMC.h"
#include "TString.h"
#include "TFolder.h"
#include "TROOT.h"

CbmDetector::CbmDetector(const char * Name, Bool_t Active, Int_t DetId )
	:CbmModule(Name, "CBM Detector", Active),
	fDetId(DetId)
{
    flGeoPar = new TList();
    TString lname( GetName());
    lname += "GeoPar";
    flGeoPar->SetName(lname.Data());
    kGeoSaved = kFALSE;
    

}
CbmDetector::~CbmDetector(){

    if ( flGeoPar ) delete flGeoPar;

}

CbmDetector::CbmDetector()
 :fDetId(0)
{

}

void   CbmDetector::Initialize()
{
// Registers hits collection in Root manager;
// sets sensitive volumes.
// ---
  Int_t NoOfEntries=svList->GetEntries();
  Int_t fMCid;
  CbmGeoNode *fN;
  TString cutName;
  TString copysign="#";
  for (Int_t i = 0 ; i < NoOfEntries ; i++ )  {
      CbmVolume* aVol = (CbmVolume*) svList->At(i);
      cutName = aVol->getName();
      Ssiz_t pos = cutName.Index (copysign, 1); 
//      std::cout << " Ssiz_t= cutName" << pos << " Name  " << cutName << std::endl;
      if(pos>1) cutName.Resize(pos);
      if ( aVol->getModId() == GetModId()  ) {  
		fMCid=gMC->VolId(cutName.Data());
        	aVol->setMCid(fMCid);
		fN=aVol->getGeoNode();
		if (fN) fN->setMCid(fMCid);
      }
  } 

}

void CbmDetector::SaveGeoParams(){

    if ( ! kGeoSaved  ) {
  std::cout << " -I CbmDetector: " << GetName() << " Geometry parameters saved ... " << std::endl;
  TFolder *mf = (TFolder*) gROOT->FindObjectAny("cbmroot");
  TFolder *stsf = NULL;
  if (mf ) stsf = (TFolder*) mf->FindObjectAny(GetName());
  if (stsf) {
    TFolder *newf = stsf->AddFolder("Parameters","Detector parameters",NULL);
    newf->Add( flGeoPar ) ;
  }
  kGeoSaved = kTRUE;
 }
}


ClassImp(CbmDetector)




